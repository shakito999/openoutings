"use client"
import { useState } from 'react'
import { INTEREST_GROUPS } from '@/lib/interestGroups'

export interface QuizQuestion {
  id: string
  question: string
  emoji: string
  options: {
    text: string
    emoji: string
    groups: string[] // maps to interest group IDs
  }[]
}

const QUIZ_QUESTIONS: QuizQuestion[] = [
  {
    id: 'weekend',
    question: '–ò–¥–µ–∞–ª–Ω–∏—è—Ç —Ç–∏ —É–∏–∫–µ–Ω–¥ –µ:',
    emoji: 'üåü',
    options: [
      { text: '–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –æ—Ç–∫—Ä–∏—Ç–æ –≤ –ø–ª–∞–Ω–∏–Ω–∞—Ç–∞', emoji: 'üèîÔ∏è', groups: ['outdoor', 'winter', 'travel'] },
      { text: '–ö–∞—á–≤–∞–Ω–µ –Ω–∞ —É–º–µ–Ω–∏—è –≤ —Å–ø–æ—Ä—Ç–Ω–∞—Ç–∞ –∑–∞–ª–∞', emoji: 'üí™', groups: ['fitness', 'team-sports'] },
      { text: '–ò–∑–∫—É—Å—Ç–≤–æ, –º—É–∑–µ–∏ –∏ –∫—É–ª—Ç—É—Ä–∞', emoji: 'üé®', groups: ['arts', 'culture', 'music'] },
      { text: '–†–µ–ª–∞–∫—Å —Å –ø—Ä–∏—è—Ç–µ–ª–∏ –∏ –¥–æ–±—Ä–∞ —Ö—Ä–∞–Ω–∞', emoji: 'üç∑', groups: ['food', 'games', 'wellness'] }
    ]
  },
  {
    id: 'energy',
    question: '–ö—ä–¥–µ –∑–∞—Ä–µ–∂–¥–∞—à –±–∞—Ç–µ—Ä–∏–∏—Ç–µ —Å–∏:',
    emoji: '‚ö°',
    options: [
      { text: '–°—Ä–µ–¥ –ø—Ä–∏—Ä–æ–¥–∞—Ç–∞, –Ω–∞ —á–∏—Å—Ç –≤—ä–∑–¥—É—Ö', emoji: 'üå≤', groups: ['outdoor', 'travel', 'wellness'] },
      { text: '–í –¥–∏–Ω–∞–º–∏—á–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞', emoji: 'üèÉ', groups: ['fitness', 'team-sports', 'dance'] },
      { text: '–í –∫—Ä–µ–∞—Ç–∏–≤–Ω–∞ —Ä–∞–±–æ—Ç–∏–ª–Ω–∏—Ü–∞', emoji: 'üé®', groups: ['arts', 'music', 'learning'] },
      { text: '–ù–∞ —Å–ø–æ–∫–æ–π–Ω–æ –º—è—Å—Ç–æ —Å –∫–Ω–∏–≥–∞ –∏–ª–∏ –º–µ–¥–∏—Ç–∞—Ü–∏—è', emoji: 'üßò', groups: ['wellness', 'learning'] }
    ]
  },
  {
    id: 'social',
    question: '–ö–∞–∫ –æ–±–∏—á–∞—à –¥–∞ –ø—Ä–µ–∫–∞—Ä–≤–∞—à –≤—Ä–µ–º–µ —Å —Ö–æ—Ä–∞:',
    emoji: 'üë•',
    options: [
      { text: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Ç–∫—Ä–∏—Ç–æ —Å –º–∞–ª–∫–∞ –≥—Ä—É–ø–∞', emoji: 'üö¥', groups: ['outdoor', 'team-sports', 'travel'] },
      { text: '–°—ä—Å—Ç–µ–∑–∞–Ω–∏—è –∏ –æ—Ç–±–æ—Ä–Ω–∏ —Å–ø–æ—Ä—Ç–æ–≤–µ', emoji: '‚öΩ', groups: ['team-sports', 'fitness'] },
      { text: '–¢–≤–æ—Ä—á–µ—Å–∫–∏ –ø—Ä–æ–µ–∫—Ç–∏ –∏ –∏–∑–ø—ä–ª–Ω–µ–Ω–∏—è', emoji: 'üé≠', groups: ['arts', 'music', 'culture', 'dance'] },
      { text: '–ù–∞—Å—Ç–æ–ª–Ω–∏ –∏–≥—Ä–∏ –∏ –¥—ä–ª–±–æ–∫–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∏', emoji: 'üé≤', groups: ['games', 'food', 'learning', 'professional'] }
    ]
  },
  {
    id: 'challenge',
    question: '–ö–∞–∫—ä–≤ —Ç–∏–ø –ø—Ä–µ–¥–∏–∑–≤–∏–∫–∞—Ç–µ–ª—Å—Ç–≤–æ —Ç–µ –≤–¥—ä—Ö–Ω–æ–≤—è–≤–∞:',
    emoji: 'üéØ',
    options: [
      { text: '–§–∏–∑–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–∏–∑–≤–∏–∫–∞—Ç–µ–ª—Å—Ç–≤–∞ –∏ –∏–∑–¥—Ä—ä–∂–ª–∏–≤–æ—Å—Ç', emoji: 'üßó', groups: ['outdoor', 'fitness', 'winter'] },
      { text: '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∏ —Ç–µ—Ö–Ω–∏–∫–∞', emoji: 'ü§∏', groups: ['team-sports', 'dance', 'fitness'] },
      { text: '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ –∏ —Å–∞–º–æ–∏–∑—Ä–∞–∑—è–≤–∞–Ω–µ', emoji: 'üé®', groups: ['arts', 'music', 'culture'] },
      { text: '–ò–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª–Ω–∏ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏ –∏–≥—Ä–∏', emoji: 'üß©', groups: ['games', 'learning', 'tech', 'professional'] }
    ]
  },
  {
    id: 'discovery',
    question: '–ö–∞–∫ –æ–±–∏—á–∞—à –¥–∞ –æ—Ç–∫—Ä–∏–≤–∞—à –Ω–æ–≤–∏ –Ω–µ—â–∞:',
    emoji: 'üîç',
    options: [
      { text: '–ò–∑—Å–ª–µ–¥–≤–∞–Ω–µ –Ω–∞ –Ω–æ–≤–∏ –º–µ—Å—Ç–∞ –∏ –ø—ä—Ç–∏—â–∞', emoji: 'üó∫Ô∏è', groups: ['outdoor', 'travel'] },
      { text: '–û–ø–∏—Ç–≤–∞–Ω–µ –Ω–∞ –Ω–æ–≤–∏ —Å–ø–æ—Ä—Ç–æ–≤–µ –∏ –¥–µ–π–Ω–æ—Å—Ç–∏', emoji: '‚õ∑Ô∏è', groups: ['fitness', 'team-sports', 'winter', 'dance'] },
      { text: '–ö—É–ª—Ç—É—Ä–Ω–∏ —Å—ä–±–∏—Ç–∏—è –∏ –∏–∑–ª–æ–∂–±–∏', emoji: 'üé≠', groups: ['culture', 'arts', 'music'] },
      { text: '–ì–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–Ω–∏ –ø—Ä–µ–∂–∏–≤—è–≤–∞–Ω–∏—è', emoji: 'üçΩÔ∏è', groups: ['food', 'travel'] }
    ]
  },
  {
    id: 'companion',
    question: '–¢–≤–æ—è—Ç –∏–¥–µ–∞–ª–µ–Ω —Å–ø—ä—Ç–Ω–∏–∫ –∑–∞ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –µ:',
    emoji: 'üêæ',
    options: [
      { text: '–ö—É—á–µ –∏–ª–∏ –ª—é–±–∏–º–µ—Ü', emoji: 'üêï', groups: ['animals', 'outdoor', 'wellness'] },
      { text: '–¢—Ä–µ–Ω–∏—Ä–æ–≤—ä—á–µ–Ω –ø–∞—Ä—Ç–Ω—å–æ—Ä', emoji: 'ü§ù', groups: ['fitness', 'team-sports'] },
      { text: '–¢–≤–æ—Ä—á–µ—Å–∫–∞ –¥—É—à–∞', emoji: 'üé®', groups: ['arts', 'music', 'culture'] },
      { text: '–î–æ–±—ä—Ä –ø—Ä–∏—è—Ç–µ–ª –∑–∞ –¥—ä–ª–±–æ–∫–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∏', emoji: '‚òï', groups: ['food', 'learning', 'wellness'] }
    ]
  }
]

interface InterestQuizProps {
  onComplete: (interests: string[]) => void
  onSkip?: () => void
  language?: 'bg' | 'en'
}

export default function InterestQuiz({ onComplete, onSkip }: InterestQuizProps) {
  const [currentQuestion, setCurrentQuestion] = useState(0)
  const [answers, setAnswers] = useState<Record<string, number>>({})
  const [showResults, setShowResults] = useState(false)
  const [selectedInterests, setSelectedInterests] = useState<string[]>([])
  const [removedInterests, setRemovedInterests] = useState<Set<string>>(new Set())

  const handleAnswer = (optionIndex: number) => {
    const question = QUIZ_QUESTIONS[currentQuestion]
    const newAnswers = { ...answers, [question.id]: optionIndex }
    setAnswers(newAnswers)

    // Animate to next question
    setTimeout(() => {
      if (currentQuestion < QUIZ_QUESTIONS.length - 1) {
        setCurrentQuestion(currentQuestion + 1)
      } else {
        calculateResults(newAnswers)
      }
    }, 300)
  }

  const calculateResults = (finalAnswers: Record<string, number>) => {
    // Count interest group scores
    const groupScores: Record<string, number> = {}
    
    QUIZ_QUESTIONS.forEach((question) => {
      const answerIndex = finalAnswers[question.id]
      if (answerIndex !== undefined) {
        const selectedOption = question.options[answerIndex]
        selectedOption.groups.forEach((groupId) => {
          groupScores[groupId] = (groupScores[groupId] || 0) + 1
        })
      }
    })

    // Get top 5-8 interest groups
    const sortedGroups = Object.entries(groupScores)
      .sort(([, a], [, b]) => b - a)
      .slice(0, Math.min(8, Object.keys(groupScores).length))

    // Get all interests from top groups
    const interests = sortedGroups.flatMap(([groupId]) => {
      const group = INTEREST_GROUPS.find(g => g.id === groupId)
      return group ? group.interests : []
    })

    // Remove duplicates and take top interests
    const uniqueInterests = Array.from(new Set(interests)).slice(0, 12)
    
    setSelectedInterests(uniqueInterests)
    setShowResults(true)
  }

  const handleRemoveInterest = (interest: string) => {
    const newRemoved = new Set(removedInterests)
    newRemoved.add(interest)
    setRemovedInterests(newRemoved)
  }

  const handleConfirmResults = () => {
    const finalInterests = selectedInterests.filter(i => !removedInterests.has(i))
    onComplete(finalInterests)
  }

  const handleRetake = () => {
    setCurrentQuestion(0)
    setAnswers({})
    setShowResults(false)
    setSelectedInterests([])
    setRemovedInterests(new Set())
  }

  const progress = ((currentQuestion + 1) / QUIZ_QUESTIONS.length) * 100

  if (showResults) {
    return (
      <div className="space-y-6 animate-fade-in">
        {/* Results Header */}
        <div className="text-center">
          <div className="inline-flex items-center justify-center w-20 h-20 bg-gradient-to-br from-green-500 to-emerald-600 rounded-full mb-4 animate-bounce-once">
            <svg className="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
            </svg>
          </div>
          <h2 className="text-3xl font-bold text-gray-900 dark:text-white mb-2">
            –û—Ç–∫—Ä–∏—Ö–º–µ —Ç–≤–æ–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–∏! üéâ
          </h2>
          <p className="text-gray-600 dark:text-gray-400">
            –ë–∞–∑–∏—Ä–∞–Ω–æ –Ω–∞ –æ—Ç–≥–æ–≤–æ—Ä–∏—Ç–µ —Ç–∏, –µ—Ç–æ –∫–∞–∫–≤–æ –±–∏ —Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–≤–∞–ª–æ:
          </p>
        </div>

        {/* Selected Interests */}
        <div className="bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20 rounded-xl p-6">
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2 flex items-center">
            <span className="mr-2">‚ú®</span>
            –¢–≤–æ–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–∏ ({selectedInterests.length - removedInterests.size})
          </h3>
          <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
            –ö–ª–∏–∫–Ω–∏ –Ω–∞ X –∑–∞ –¥–∞ –ø—Ä–µ–º–∞—Ö–Ω–µ—à –Ω–µ–Ω—É–∂–Ω–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∏
          </p>
          <div className="flex flex-wrap gap-2">
            {selectedInterests.map((interest) => {
              if (removedInterests.has(interest)) return null
              const group = INTEREST_GROUPS.find(g => g.interests.includes(interest))
              return (
                <div
                  key={interest}
                  className="px-4 py-2 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-full text-sm font-medium shadow-md shadow-blue-500/30 flex items-center gap-2 group"
                >
                  {group && <span>{group.emoji}</span>}
                  <span>{interest}</span>
                  <button
                    onClick={() => handleRemoveInterest(interest)}
                    className="ml-1 opacity-70 hover:opacity-100 transition-opacity flex items-center justify-center w-5 h-5 rounded-full hover:bg-white/30"
                    title="–ü—Ä–µ–º–∞—Ö–Ω–∏"
                  >
                    ‚úï
                  </button>
                </div>
              )
            })}
          </div>
        </div>

        {/* Action Buttons */}
        <div className="flex gap-3">
          <button
            onClick={handleRetake}
            className="flex-1 px-6 py-3 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors font-medium"
          >
            –ü—Ä–µ–∏–≥–∞–π –∫–≤–∏–∑–∞
          </button>
          <button
            onClick={handleConfirmResults}
            className="flex-1 px-6 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg hover:from-blue-700 hover:to-purple-700 transition-all font-medium shadow-lg shadow-blue-500/30 flex items-center justify-center"
          >
            –ò–∑–ø–æ–ª–∑–≤–∞–π —Ç–µ–∑–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∏
            <svg className="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
            </svg>
          </button>
        </div>
      </div>
    )
  }

  const question = QUIZ_QUESTIONS[currentQuestion]

  return (
    <div className="space-y-6">
      {/* Progress */}
      <div>
        <div className="flex items-center justify-between mb-2">
          <span className="text-sm font-medium text-gray-600 dark:text-gray-400">
            –í—ä–ø—Ä–æ—Å {currentQuestion + 1} –æ—Ç {QUIZ_QUESTIONS.length}
          </span>
          <span className="text-sm font-medium text-gray-600 dark:text-gray-400">
            {Math.round(progress)}%
          </span>
        </div>
        <div className="h-2 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden">
          <div
            className="h-full bg-gradient-to-r from-blue-600 to-purple-600 transition-all duration-500"
            style={{ width: `${progress}%` }}
          />
        </div>
      </div>

      {/* Question */}
      <div className="text-center animate-fade-in">
        <div className="text-6xl mb-4">{question.emoji}</div>
        <h3 className="text-2xl font-bold text-gray-900 dark:text-white mb-6">
          {question.question}
        </h3>
      </div>

      {/* Options */}
      <div className="grid grid-cols-2 gap-3">
        {question.options.map((option, index) => (
          <button
            key={index}
            onClick={() => handleAnswer(index)}
            className="group p-3 sm:p-6 bg-white dark:bg-gray-800 border-2 border-gray-200 dark:border-gray-700 rounded-xl hover:border-blue-500 dark:hover:border-blue-400 hover:shadow-lg transition-all transform hover:-translate-y-1"
          >
            <div className="text-2xl sm:text-4xl mb-2 sm:mb-3">{option.emoji}</div>
            <p className="text-sm sm:text-base text-gray-900 dark:text-white font-medium group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors">
              {option.text}
            </p>
          </button>
        ))}
      </div>

      {/* Skip Button */}
      {onSkip && (
        <div className="text-center pt-4">
          <button
            onClick={onSkip}
            className="text-sm text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 transition-colors"
          >
            –ü—Ä–æ–ø—É—Å–Ω–∏ –∫–≤–∏–∑–∞ ‚Üí
          </button>
        </div>
      )}

      <style jsx>{`
        @keyframes fade-in {
          from {
            opacity: 0;
            transform: translateY(10px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }
        
        @keyframes bounce-once {
          0%, 100% {
            transform: translateY(0);
          }
          50% {
            transform: translateY(-10px);
          }
        }
        
        .animate-fade-in {
          animation: fade-in 0.3s ease-out;
        }
        
        .animate-bounce-once {
          animation: bounce-once 0.6s ease-out;
        }
      `}</style>
    </div>
  )
}
