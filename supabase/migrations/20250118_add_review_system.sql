-- Enable UUID extension if not already enabled
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Event Check-ins (QR Code Verification)
CREATE TABLE IF NOT EXISTS public.event_checkins (
  id BIGSERIAL PRIMARY KEY,
  event_id BIGINT NOT NULL REFERENCES public.events(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  checked_in_at TIMESTAMPTZ DEFAULT NOW(),
  check_in_method VARCHAR(20) DEFAULT 'qr_code', -- 'qr_code', 'manual', 'auto'
  
  -- QR Code verification
  qr_code_id UUID, -- Links to the QR code that was scanned
  
  -- Prevent duplicate check-ins
  UNIQUE(event_id, user_id)
);

-- QR Codes for Events (generated by host)
CREATE TABLE IF NOT EXISTS public.event_qr_codes (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  event_id BIGINT NOT NULL REFERENCES public.events(id) ON DELETE CASCADE,
  code TEXT NOT NULL UNIQUE, -- The actual QR code data
  created_by UUID NOT NULL REFERENCES public.profiles(id),
  created_at TIMESTAMPTZ DEFAULT NOW(),
  expires_at TIMESTAMPTZ, -- Optional expiration
  is_active BOOLEAN DEFAULT true,
  scan_count INTEGER DEFAULT 0
);

-- One active QR code per event (partial unique index)
CREATE UNIQUE INDEX IF NOT EXISTS idx_one_active_qr_per_event 
  ON public.event_qr_codes(event_id) 
  WHERE is_active = true;

-- Reviews System
CREATE TABLE IF NOT EXISTS public.reviews (
  id BIGSERIAL PRIMARY KEY,
  event_id BIGINT NOT NULL REFERENCES public.events(id) ON DELETE CASCADE,
  reviewer_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  reviewee_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE, -- Person being reviewed
  
  -- Rating (1-5 stars)
  overall_rating INTEGER NOT NULL CHECK (overall_rating >= 1 AND overall_rating <= 5),
  
  -- Optional detailed ratings
  friendliness_rating INTEGER CHECK (friendliness_rating >= 1 AND friendliness_rating <= 5),
  communication_rating INTEGER CHECK (communication_rating >= 1 AND communication_rating <= 5),
  reliability_rating INTEGER CHECK (reliability_rating >= 1 AND reliability_rating <= 5),
  
  -- Review content
  review_text TEXT CHECK (LENGTH(review_text) >= 10 AND LENGTH(review_text) <= 1000),
  
  -- Verification
  is_verified_attendee BOOLEAN DEFAULT false, -- Did they check in via QR?
  
  -- Timestamps
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW(),
  can_edit_until TIMESTAMPTZ DEFAULT (NOW() + INTERVAL '48 hours'),
  
  -- Moderation
  is_flagged BOOLEAN DEFAULT false,
  flag_count INTEGER DEFAULT 0,
  flag_reasons TEXT[], -- Array of flag reasons
  is_hidden BOOLEAN DEFAULT false, -- Hidden by moderators
  moderator_notes TEXT,
  
  -- Response from reviewee
  response_text TEXT,
  response_at TIMESTAMPTZ,
  
  -- Anti-spam
  reviewer_ip_hash TEXT, -- Hashed IP for spam detection
  
  -- Prevent duplicate reviews
  UNIQUE(event_id, reviewer_id, reviewee_id),
  
  -- Can't review yourself
  CHECK (reviewer_id != reviewee_id)
);

-- Review Flags (when users report reviews)
CREATE TABLE IF NOT EXISTS public.review_flags (
  id BIGSERIAL PRIMARY KEY,
  review_id BIGINT NOT NULL REFERENCES public.reviews(id) ON DELETE CASCADE,
  flagger_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  reason TEXT NOT NULL,
  additional_info TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  resolved BOOLEAN DEFAULT false,
  resolved_at TIMESTAMPTZ,
  resolved_by UUID REFERENCES public.profiles(id),
  resolution_notes TEXT,
  
  -- One flag per user per review
  UNIQUE(review_id, flagger_id)
);

-- Review Helpful Votes (community moderation)
CREATE TABLE IF NOT EXISTS public.review_votes (
  id BIGSERIAL PRIMARY KEY,
  review_id BIGINT NOT NULL REFERENCES public.reviews(id) ON DELETE CASCADE,
  voter_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  is_helpful BOOLEAN NOT NULL, -- true = helpful, false = not helpful
  created_at TIMESTAMPTZ DEFAULT NOW(),
  
  UNIQUE(review_id, voter_id)
);

-- Indexes for performance
CREATE INDEX IF NOT EXISTS idx_checkins_event ON public.event_checkins(event_id);
CREATE INDEX IF NOT EXISTS idx_checkins_user ON public.event_checkins(user_id);
CREATE INDEX IF NOT EXISTS idx_qr_codes_event ON public.event_qr_codes(event_id);
CREATE INDEX IF NOT EXISTS idx_reviews_event ON public.reviews(event_id);
CREATE INDEX IF NOT EXISTS idx_reviews_reviewee ON public.reviews(reviewee_id);
CREATE INDEX IF NOT EXISTS idx_reviews_reviewer ON public.reviews(reviewer_id);
CREATE INDEX IF NOT EXISTS idx_reviews_created ON public.reviews(created_at DESC);
CREATE INDEX IF NOT EXISTS idx_reviews_flagged ON public.reviews(is_flagged) WHERE is_flagged = true;
CREATE INDEX IF NOT EXISTS idx_review_flags_unresolved ON public.review_flags(resolved) WHERE resolved = false;

-- Function to update review updated_at timestamp
CREATE OR REPLACE FUNCTION update_review_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to auto-update updated_at
CREATE TRIGGER update_reviews_updated_at
  BEFORE UPDATE ON public.reviews
  FOR EACH ROW
  EXECUTE FUNCTION update_review_updated_at();

-- Function to increment QR scan count
CREATE OR REPLACE FUNCTION increment_qr_scan_count()
RETURNS TRIGGER AS $$
BEGIN
  IF NEW.qr_code_id IS NOT NULL THEN
    UPDATE public.event_qr_codes
    SET scan_count = scan_count + 1
    WHERE id = NEW.qr_code_id;
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to count QR scans
CREATE TRIGGER count_qr_scans
  AFTER INSERT ON public.event_checkins
  FOR EACH ROW
  EXECUTE FUNCTION increment_qr_scan_count();

-- Function to auto-flag reviews with profanity (basic implementation)
CREATE OR REPLACE FUNCTION check_review_profanity()
RETURNS TRIGGER AS $$
DECLARE
  profanity_words TEXT[] := ARRAY['spam', 'fake', 'scam']; -- Add more as needed
  word TEXT;
BEGIN
  -- Check if review_text contains profanity
  IF NEW.review_text IS NOT NULL THEN
    FOREACH word IN ARRAY profanity_words
    LOOP
      IF LOWER(NEW.review_text) LIKE '%' || word || '%' THEN
        NEW.is_flagged := true;
        NEW.flag_reasons := ARRAY['Auto-flagged: Potential inappropriate content'];
        EXIT;
      END IF;
    END LOOP;
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to auto-flag problematic reviews
CREATE TRIGGER auto_flag_reviews
  BEFORE INSERT ON public.reviews
  FOR EACH ROW
  EXECUTE FUNCTION check_review_profanity();

-- Add review stats to profiles (materialized for performance)
CREATE MATERIALIZED VIEW IF NOT EXISTS public.profile_review_stats AS
SELECT 
  reviewee_id as profile_id,
  COUNT(*) as total_reviews,
  AVG(overall_rating) as average_rating,
  COUNT(*) FILTER (WHERE is_verified_attendee = true) as verified_reviews,
  COUNT(*) FILTER (WHERE overall_rating = 5) as five_star_count,
  COUNT(*) FILTER (WHERE overall_rating = 4) as four_star_count,
  COUNT(*) FILTER (WHERE overall_rating = 3) as three_star_count,
  COUNT(*) FILTER (WHERE overall_rating = 2) as two_star_count,
  COUNT(*) FILTER (WHERE overall_rating = 1) as one_star_count,
  MAX(created_at) as last_reviewed_at
FROM public.reviews
WHERE is_hidden = false
GROUP BY reviewee_id;

-- Index on materialized view
CREATE UNIQUE INDEX IF NOT EXISTS idx_profile_review_stats ON public.profile_review_stats(profile_id);

-- Refresh function (call periodically or on review changes)
CREATE OR REPLACE FUNCTION refresh_review_stats()
RETURNS void AS $$
BEGIN
  REFRESH MATERIALIZED VIEW CONCURRENTLY public.profile_review_stats;
END;
$$ LANGUAGE plpgsql;

-- Add review toggle feature flag (can hide entire system)
CREATE TABLE IF NOT EXISTS public.feature_flags (
  id SERIAL PRIMARY KEY,
  feature_name VARCHAR(50) UNIQUE NOT NULL,
  is_enabled BOOLEAN DEFAULT false,
  description TEXT,
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Insert review system feature flag
INSERT INTO public.feature_flags (feature_name, is_enabled, description)
VALUES ('review_system', true, 'Enable/disable the entire review and rating system')
ON CONFLICT (feature_name) DO NOTHING;

INSERT INTO public.feature_flags (feature_name, is_enabled, description)
VALUES ('qr_checkins', true, 'Enable/disable QR code check-in system')
ON CONFLICT (feature_name) DO NOTHING;

-- Grant permissions (adjust as needed for your RLS policies)
-- Note: Add proper RLS policies for your security requirements
