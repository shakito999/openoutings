-- Review System Migration V2
-- Verified against actual Supabase schema
-- This implements a comprehensive peer review system with QR code check-ins,
-- abuse prevention, and feature flag toggles

-- Enable UUID extension if not already enabled
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Drop old reviews table (only had host reviews, not event-based peer reviews)
DROP TABLE IF EXISTS public.reviews CASCADE;

-- Event Check-ins (QR Code Verification)
CREATE TABLE public.event_checkins (
  id bigserial PRIMARY KEY,
  event_id bigint NOT NULL,
  user_id uuid NOT NULL,
  checked_in_at timestamptz DEFAULT now(),
  check_in_method varchar(20) DEFAULT 'qr_code', -- 'qr_code', 'manual', 'auto'
  qr_code_id uuid, -- Links to the QR code that was scanned
  UNIQUE(event_id, user_id),
  CONSTRAINT event_checkins_event_id_fkey FOREIGN KEY (event_id) REFERENCES public.events(id) ON DELETE CASCADE,
  CONSTRAINT event_checkins_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id) ON DELETE CASCADE
);

-- QR Codes for Events (generated by host)
CREATE TABLE public.event_qr_codes (
  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
  event_id bigint NOT NULL,
  code text NOT NULL UNIQUE,
  created_by uuid NOT NULL,
  created_at timestamptz DEFAULT now(),
  expires_at timestamptz,
  is_active boolean DEFAULT true,
  scan_count integer DEFAULT 0,
  CONSTRAINT event_qr_codes_event_id_fkey FOREIGN KEY (event_id) REFERENCES public.events(id) ON DELETE CASCADE,
  CONSTRAINT event_qr_codes_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.profiles(id) ON DELETE CASCADE
);

-- One active QR code per event
CREATE UNIQUE INDEX idx_one_active_qr_per_event 
  ON public.event_qr_codes(event_id) 
  WHERE is_active = true;

-- Reviews System (peer-to-peer)
CREATE TABLE public.reviews (
  id bigserial PRIMARY KEY,
  event_id bigint NOT NULL,
  reviewer_id uuid NOT NULL,
  reviewee_id uuid NOT NULL,
  
  -- Rating (1-5 stars)
  overall_rating integer NOT NULL CHECK (overall_rating >= 1 AND overall_rating <= 5),
  
  -- Optional detailed ratings
  friendliness_rating integer CHECK (friendliness_rating >= 1 AND friendliness_rating <= 5),
  communication_rating integer CHECK (communication_rating >= 1 AND communication_rating <= 5),
  reliability_rating integer CHECK (reliability_rating >= 1 AND reliability_rating <= 5),
  
  -- Review content
  review_text text CHECK (LENGTH(review_text) >= 10 AND LENGTH(review_text) <= 1000),
  
  -- Verification
  is_verified_attendee boolean DEFAULT false,
  
  -- Timestamps
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  can_edit_until timestamptz DEFAULT (now() + interval '48 hours'),
  
  -- Moderation
  is_flagged boolean DEFAULT false,
  flag_count integer DEFAULT 0,
  flag_reasons text[],
  is_hidden boolean DEFAULT false,
  moderator_notes text,
  
  -- Response from reviewee
  response_text text,
  response_at timestamptz,
  
  -- Anti-spam
  reviewer_ip_hash text,
  
  -- Constraints
  UNIQUE(event_id, reviewer_id, reviewee_id),
  CHECK (reviewer_id != reviewee_id),
  CONSTRAINT reviews_event_id_fkey FOREIGN KEY (event_id) REFERENCES public.events(id) ON DELETE CASCADE,
  CONSTRAINT reviews_reviewer_id_fkey FOREIGN KEY (reviewer_id) REFERENCES public.profiles(id) ON DELETE CASCADE,
  CONSTRAINT reviews_reviewee_id_fkey FOREIGN KEY (reviewee_id) REFERENCES public.profiles(id) ON DELETE CASCADE
);

-- Review Flags (abuse reporting)
CREATE TABLE public.review_flags (
  id bigserial PRIMARY KEY,
  review_id bigint NOT NULL,
  flagger_id uuid NOT NULL,
  reason text NOT NULL,
  additional_info text,
  created_at timestamptz DEFAULT now(),
  resolved boolean DEFAULT false,
  resolved_at timestamptz,
  resolved_by uuid,
  resolution_notes text,
  UNIQUE(review_id, flagger_id),
  CONSTRAINT review_flags_review_id_fkey FOREIGN KEY (review_id) REFERENCES public.reviews(id) ON DELETE CASCADE,
  CONSTRAINT review_flags_flagger_id_fkey FOREIGN KEY (flagger_id) REFERENCES public.profiles(id) ON DELETE CASCADE,
  CONSTRAINT review_flags_resolved_by_fkey FOREIGN KEY (resolved_by) REFERENCES public.profiles(id) ON DELETE SET NULL
);

-- Review Helpful Votes (community moderation)
CREATE TABLE public.review_votes (
  id bigserial PRIMARY KEY,
  review_id bigint NOT NULL,
  voter_id uuid NOT NULL,
  is_helpful boolean NOT NULL,
  created_at timestamptz DEFAULT now(),
  UNIQUE(review_id, voter_id),
  CONSTRAINT review_votes_review_id_fkey FOREIGN KEY (review_id) REFERENCES public.reviews(id) ON DELETE CASCADE,
  CONSTRAINT review_votes_voter_id_fkey FOREIGN KEY (voter_id) REFERENCES public.profiles(id) ON DELETE CASCADE
);

-- Feature Flags (to toggle review system on/off)
CREATE TABLE public.feature_flags (
  id serial PRIMARY KEY,
  feature_name varchar(50) UNIQUE NOT NULL,
  is_enabled boolean DEFAULT false,
  description text,
  updated_at timestamptz DEFAULT now()
);

-- Insert review system feature flags
INSERT INTO public.feature_flags (feature_name, is_enabled, description)
VALUES 
  ('review_system', true, 'Enable/disable the entire review and rating system'),
  ('qr_checkins', true, 'Enable/disable QR code check-in system')
ON CONFLICT (feature_name) DO NOTHING;

-- Indexes for performance
CREATE INDEX idx_checkins_event ON public.event_checkins(event_id);
CREATE INDEX idx_checkins_user ON public.event_checkins(user_id);
CREATE INDEX idx_qr_codes_event ON public.event_qr_codes(event_id);
CREATE INDEX idx_reviews_event ON public.reviews(event_id);
CREATE INDEX idx_reviews_reviewee ON public.reviews(reviewee_id);
CREATE INDEX idx_reviews_reviewer ON public.reviews(reviewer_id);
CREATE INDEX idx_reviews_created ON public.reviews(created_at DESC);
CREATE INDEX idx_reviews_flagged ON public.reviews(is_flagged) WHERE is_flagged = true;
CREATE INDEX idx_review_flags_unresolved ON public.review_flags(resolved) WHERE resolved = false;

-- Function to update review updated_at timestamp
CREATE OR REPLACE FUNCTION update_review_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to auto-update updated_at
CREATE TRIGGER update_reviews_updated_at
  BEFORE UPDATE ON public.reviews
  FOR EACH ROW
  EXECUTE FUNCTION update_review_updated_at();

-- Function to increment QR scan count
CREATE OR REPLACE FUNCTION increment_qr_scan_count()
RETURNS TRIGGER AS $$
BEGIN
  IF NEW.qr_code_id IS NOT NULL THEN
    UPDATE public.event_qr_codes
    SET scan_count = scan_count + 1
    WHERE id = NEW.qr_code_id;
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to count QR scans
CREATE TRIGGER count_qr_scans
  AFTER INSERT ON public.event_checkins
  FOR EACH ROW
  EXECUTE FUNCTION increment_qr_scan_count();

-- Function to auto-flag reviews with profanity
CREATE OR REPLACE FUNCTION check_review_profanity()
RETURNS TRIGGER AS $$
DECLARE
  profanity_words text[] := ARRAY['spam', 'fake', 'scam'];
  word text;
BEGIN
  IF NEW.review_text IS NOT NULL THEN
    FOREACH word IN ARRAY profanity_words
    LOOP
      IF LOWER(NEW.review_text) LIKE '%' || word || '%' THEN
        NEW.is_flagged := true;
        NEW.flag_reasons := ARRAY['Auto-flagged: Potential inappropriate content'];
        EXIT;
      END IF;
    END LOOP;
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to auto-flag problematic reviews
CREATE TRIGGER auto_flag_reviews
  BEFORE INSERT ON public.reviews
  FOR EACH ROW
  EXECUTE FUNCTION check_review_profanity();

-- Materialized view for review statistics
CREATE MATERIALIZED VIEW public.profile_review_stats AS
SELECT 
  reviewee_id as profile_id,
  COUNT(*) as total_reviews,
  AVG(overall_rating) as average_rating,
  COUNT(*) FILTER (WHERE is_verified_attendee = true) as verified_reviews,
  COUNT(*) FILTER (WHERE overall_rating = 5) as five_star_count,
  COUNT(*) FILTER (WHERE overall_rating = 4) as four_star_count,
  COUNT(*) FILTER (WHERE overall_rating = 3) as three_star_count,
  COUNT(*) FILTER (WHERE overall_rating = 2) as two_star_count,
  COUNT(*) FILTER (WHERE overall_rating = 1) as one_star_count,
  MAX(created_at) as last_reviewed_at
FROM public.reviews
WHERE is_hidden = false
GROUP BY reviewee_id;

CREATE UNIQUE INDEX idx_profile_review_stats ON public.profile_review_stats(profile_id);

-- Function to refresh review stats
CREATE OR REPLACE FUNCTION refresh_review_stats()
RETURNS void AS $$
BEGIN
  REFRESH MATERIALIZED VIEW CONCURRENTLY public.profile_review_stats;
END;
$$ LANGUAGE plpgsql;

-- Grant permissions (adjust based on your RLS policies)
-- Note: Add proper RLS policies for your security requirements
